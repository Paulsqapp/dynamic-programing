'''
Dynamic Programming Rod Cutting Using Tabular Method (Python Implementation)
The following code is implementation of Dynamic Programming
rod cutting problem using Tabular Technique, which for python
programming, is much easier and more efficient than the recursive approach
'''


from copy import deepcopy

rod_cutting = {
    1:1, 2:5, 3:8, 4:9, 5:10, 6:17, 7:17, 8:20, 9:24, 10:30, 
}
#11:35, 12:38, 13:43, 14:49, 15:52, 16:56, 17:59, 18:61, 19:65, 20:70,
def cutting(rod_cutting, n): # n is length of rod
    '''
    what is the most profitable way to cut a rod of len(n) for my bizz
    graph sub-structure represented as a table
    Uncomment print to understand the program flow
    return an integer of, of max profit to be obtained eg. 25
    '''
    assert n <= max(rod_cutting),  'Cut greater than length of rod'
    table2 = deepcopy(rod_cutting)
    table2[0] = 0
    #table2[1] = rod_cutting[1]
    
    for k, v in rod_cutting.items():
        print('outer loop start',k)
        if k > 1 and k < n+1:
            for i in range(1, k+1):
                a = k // i
                b = k % i
                m = (a * table2[i]) + (1 * table2[b])
                table2[k] = max(table2[k], m)
    
            print(table2)
    return table2[n]
    
x = cutting(rod_cutting,6)

def extended_cutting(rod_cutting, n): # n is length of rod
    '''
    An extention of cutting above but returns a tuple,
    [[1, 6], [1, 3], 25], read as one piece of length 6 and 3 and 
    maximum profit of 25
    '''
    assert n <= max(rod_cutting), 'Cut greater than length of rod'
    table2 = deepcopy(rod_cutting)
    table2[0] = 0
    table3 = {}
    
    for k, v in rod_cutting.items():
        print('outer loop start',k)
        if k > 1 and k < n+1:
            for i in range(1, k+1):
                print('start innerloop')
                a = k // i
                b = k % i
                m = (a * table2[i]) + (1 * table2[b])
                if m > table2[k]:
                    table3[k] = []
                    x = [[a,i],[1,b]]
                    table3[k] = table3[k] + x + [m]
                
                table2[k] = max(table2[k], m)
    
            print(table3)
    try:
        return table3[n]
    except:
        return [[1, n] ,table2[n]]
y = extended_cutting(rod_cutting,9)

def print_best_cut(rod_cutting, n ):
    '''
    extends extended_cutting() to print a human friendly statement
    '''
    x = extended_cutting(rod_cutting,n)
    print(x)
    # x == [[1, 6], [1, 2], 22]
    brr = ' best cut for length' + str(n) + ' at profit ' + str(x[-1]) + ' is ' 
    counter = 1
    for i in x[0:-1]:
        brr = brr + str(i[0]) + ' X piece ' +  str(i[1]) + ',  '
        
    return brr
        
z =print_best_cut(rod_cutting, 9)
